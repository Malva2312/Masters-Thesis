# filepath: /nas-ctm01/homes/jmalva/Masters-Thesis/config_files/model/pytorch_lightning_model/luna25_pytorch_lightning_effnet_svm.yaml
model_id: ${..model_id}
model_name: ${..model_name}
hyperparameters:
  device: cuda

  optimiser:
    type: Adam #Maybe also try AdamW
    kwargs:
      lr: 0.00001
      #weight_decay: 0.0001 #does this help?

  number_of_classes: 2
  
  # EfficientNet parameters
  effnet_config:
    architecture: b2
    criterion:
      apply_weights: True
      device: ${...device}
      metadataframe: ${......data.metadataframe}
    optimiser: ${..optimiser}

    extractors:
      - name: LBP
        params:
          P: 8
          R: 1
          method: uniform
      - name: HOG
        params:
          orientations: 9
          pixels_per_cell: [8, 8]
          cells_per_block: [2, 2]
      - name: Gabor
        params:
          frequencies: [0.1, 0.2, 0.3]
          thetas: [0, 45, 90, 135]

  # SVM parameters
  svm_config:
    input_dim: 2418 # number of features being tested
    #input_dim: 1024 # number of LBP features per image
    criterion: hinge
    optimiser: ${..optimiser}
    #TODO: GRID of the following hyperparameters for LBP extraction (maybe not needed)
    # P: <value>
    # R: <value>
    # method: <value>
    extractors:
      - name: entropy
        params: {}
      - name: mean_std
        params: {}
      - name: percentiles
        params:
          percentiles: [10, 25, 50, 75, 90]
      - name: areaperimeter
        params: {}
      #- name: eccentricity_solidity
      #  params: {}
      - name: glcm
        params:
          distances: [1, 2, 3]
          angles: [0, 45, 90, 135]
      - name: lbp
        params:
          P: 8
          R: 1
          method: uniform
      - name: fft
        params: {}
      - name: gabor
        params:
          frequencies: [0.1, 0.2, 0.3]
          thetas: [0, 45, 90, 135]
      - name: hog
        params: {}

    # ResNet parameters
  resnet_config:
    architecture: 18         # Options: 18, 34, 50, 101, 152, etc.
    criterion:
      apply_weights: True
      device: ${...device}
      metadataframe: ${......data.metadataframe}
    optimiser: ${..optimiser}

      # AlexNet parameters
  alexnet_config:
    criterion:
      apply_weights: True
      device: ${...device}
      metadataframe: ${......data.metadataframe}
    optimiser: ${..optimiser}

  # VGG parameters
  vgg_config:
    architecture: 16         # Options: 11, 13, 16, 19, etc.
    criterion:
      apply_weights: True
      device: ${...device}
      metadataframe: ${......data.metadataframe}
    optimiser: ${..optimiser}

  # GoogLeNet parameters
  googlenet_config:
    criterion:
      apply_weights: True
      device: ${...device}
      metadataframe: ${......data.metadataframe}
    optimiser: ${..optimiser}